name: Build and Deploy

on:
  push:
    branches-ignore:
      - main
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: 'gwa-etl-dotnet'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './ExtractAWData'
  DOTNET_VERSION: '5.0.x'
  DOTNET_VERSION_3: '3.1.x'
  SONAR_SCANNER_PATH: './ExtractAWData/.sonar/scanner'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Setup .NET ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup .NET ${{ env.DOTNET_VERSION_3 }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_3 }}

    - name: Install Dependencies and Build
      shell: bash
      run: |
        pushd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        dotnet build --configuration Release --output ./output
        popd

    - name: Deploy Function App
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output
        publish-profile: ${{ secrets.AZURE_FUNCTION_APP_PUBLISH_PROFILE }}

  lint-code-base:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Setup .NET ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup .NET ${{ env.DOTNET_VERSION_3 }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_3 }}

    - name: Super Lint Code Base
      uses: docker://ghcr.io/github/super-linter:v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  run-sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Setup .NET ${{ env.DOTNET_VERSION }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup .NET ${{ env.DOTNET_VERSION_3 }} Environment
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION_3 }}

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/ExtractAWData/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: ${{ env.SONAR_SCANNER_PATH }}
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarCloud scanner
      if: ${{ steps.cache-sonar-scanner.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        mkdir -p ${{ env.SONAR_SCANNER_PATH }}
        dotnet tool update dotnet-sonarscanner --tool-path ${{ env.SONAR_SCANNER_PATH }}

    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: bash
      run: |
        ${{ env.SONAR_SCANNER_PATH }}/dotnet-sonarscanner begin /k:"DEFRA_gwa-etl-dotnet" /o:"defra" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        dotnet test ./Tests --collect:"XPlat Code Coverage" --logger trx
        ${{ env.SONAR_SCANNER_PATH }}/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
